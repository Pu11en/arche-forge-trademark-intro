name: "Label Issues and PRs"

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Auto-label issues
      uses: actions/github-script@v7
      with:
        script: |
          const issueLabels = {
            // Bug related
            'bug': ['critical', 'high', 'medium', 'low'],
            'critical bug': ['bug', 'critical'],
            'high priority bug': ['bug', 'high'],
            'medium priority bug': ['bug', 'medium'],
            'low priority bug': ['bug', 'low'],
            
            // Feature related
            'feature request': ['enhancement'],
            'enhancement': ['enhancement'],
            'new feature': ['enhancement'],
            
            // Documentation
            'documentation': ['documentation'],
            'docs': ['documentation'],
            'readme': ['documentation'],
            
            // Maintenance
            'dependencies': ['maintenance'],
            'security': ['security', 'maintenance'],
            'performance': ['performance', 'maintenance'],
            'refactoring': ['maintenance'],
            
            // UI/UX
            'ui': ['ui', 'enhancement'],
            'ux': ['ux', 'enhancement'],
            'design': ['ui', 'enhancement'],
            
            // Good first issues
            'good first issue': ['good first issue', 'help wanted'],
            'help wanted': ['help wanted'],
            
            // Question
            'question': ['question'],
            
            // Testing
            'tests': ['testing'],
            'testing': ['testing'],
          };
          
          const prLabels = {
            // Type of change
            'feat': ['feature'],
            'fix': ['bug'],
            'docs': ['documentation'],
            'style': ['style'],
            'refactor': ['refactoring'],
            'perf': ['performance'],
            'test': ['testing'],
            'build': ['build'],
            'ci': ['ci'],
            'chore': ['maintenance'],
            'revert': ['revert'],
            
            // Scope
            'major': ['major'],
            'minor': ['minor'],
            'patch': ['patch'],
          };
          
          // Function to check if text contains any keywords
          function containsKeywords(text, keywords) {
            const lowerText = text.toLowerCase();
            return keywords.some(keyword => lowerText.includes(keyword.toLowerCase()));
          }
          
          // Process issues
          if (context.payload.issue) {
            const issue = context.payload.issue;
            const title = issue.title;
            const body = issue.body || '';
            const fullText = `${title} ${body}`;
            
            const labelsToAdd = [];
            
            // Check for matching labels
            for (const [label, keywords] of Object.entries(issueLabels)) {
              if (containsKeywords(fullText, keywords)) {
                labelsToAdd.push(label);
              }
            }
            
            // Add size labels based on complexity
            if (containsKeywords(fullText, ['small', 'quick', 'minor'])) {
              labelsToAdd.push('size: small');
            } else if (containsKeywords(fullText, ['medium', 'moderate'])) {
              labelsToAdd.push('size: medium');
            } else if (containsKeywords(fullText, ['large', 'major', 'complex'])) {
              labelsToAdd.push('size: large');
            }
            
            // Apply labels if any were found
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labelsToAdd,
              });
            }
          }
          
          // Process pull requests
          if (context.payload.pull_request) {
            const pr = context.payload.pull_request;
            const title = pr.title;
            const body = pr.body || '';
            const fullText = `${title} ${body}`;
            
            const labelsToAdd = [];
            
            // Check for conventional commit patterns
            for (const [pattern, label] of Object.entries(prLabels)) {
              if (title.startsWith(`${pattern}:`) || title.startsWith(`${pattern}(`)) {
                labelsToAdd.push(...label);
              }
            }
            
            // Check for keywords in PR description
            if (containsKeywords(fullText, ['wip', 'work in progress', 'draft'])) {
              labelsToAdd.push('work in progress');
            }
            
            if (containsKeywords(fullText, ['breaking change', 'breaking'])) {
              labelsToAdd.push('breaking change');
            }
            
            // Apply labels if any were found
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labelsToAdd,
              });
            }
          }