name: Release Drafter

on:
  push:
    # Run release drafter on pushes to the main branch
    branches:
      - main
  # Run release drafter on pull request events targeting the main branch
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main

# Configure permissions for the workflow
permissions:
  contents: write
  pull-requests: write

jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release Notes as Pull Requests are merged into "main"
      - name: Create Release Draft
        id: create_release_draft
        uses: release-drafter/release-drafter@v5
        with:
          # (Optional) Specify config file path (default: .github/release-drafter.yml)
          config-name: release-drafter.yml
          # (Optional) Disable autolabeler
          disable-autolabeler: false
          # (Optional) Publish when ready
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # (Optional) Comment on PR with release draft link
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            if (releases.length > 0) {
              const draftRelease = releases.find(release => release.draft === true);
              if (draftRelease) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `ðŸš€ **Release Draft Updated**\n\nA draft for the next release has been updated: [Release Notes](${draftRelease.html_url})`
                });
              }
            }